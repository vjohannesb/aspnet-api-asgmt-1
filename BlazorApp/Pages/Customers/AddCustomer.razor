@page "/customers/add"
@inject ILogger<AddCustomer> _logger
<ValidateToken />


<h3>Register new customer</h3>
<p class="text-black-50 font-monospace">@(now ?? "")</p>

@if (!string.IsNullOrEmpty(_location))
{
    <div class="alert alert-success">
        <span>Customer registered! </span>
        <NavLink class="d-inline" role="button" @onclick="GoToCustomer">Go to customer</NavLink>
    </div>
}
else if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger">
        <span>@_error</span>
    </div>
}

@if (_customer == null)
{
    <p>@_message</p>
}
else
{
    <EditForm Model="_customer" OnValidSubmit="SubmitCustomer">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">First Name</label>
            <InputText @bind-Value="@_customer.FirstName" class="form-control" rows="3" />
            <ValidationMessage For="() => _customer.FirstName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Last Name</label>
            <InputText @bind-Value="@_customer.LastName" class="form-control" rows="3" />
            <ValidationMessage For="() => _customer.LastName" />
        </div>

        <div class="mb-3">
            <label class="form-label">Email address</label>
            <InputText @bind-Value="@_customer.Email" class="form-control" rows="3" />
            <ValidationMessage For="() => _customer.Email" />
        </div>

        <button type="submit" class="btn btn-success" disabled=@submitting>Submit</button>
        <button class="btn btn-secondary ms-2" @onclick="GoToList" disabled=@submitting>Back to List</button>
    </EditForm>
}

@code {
    private string now;
    private string _error;
    private string _location;
    private string _message = "Loading...";
    private bool submitting = false;

    private CustomerModel _customer;

    private string _customersUrl = "https://localhost:44330/api/customers";

    protected override void OnInitialized()
    {
        _customer = new CustomerModel();
        now = DateTime.Now.ToString("yyyy-MM-dd HH:mm");
        _message = string.Empty;
    }

    private async Task SubmitCustomer()
    {
        _error = string.Empty;
        _location = string.Empty;
        _message = string.Empty;
        submitting = true;

        var response = await apiService.SendToAPIAsync(HttpMethod.Post, _customersUrl, _customer, true);
        if (response.IsSuccessStatusCode)
        {
            _customer = new CustomerModel();
            var payload = await response.Content.ReadFromJsonAsync<ResponseModel>();
            _location = $"/customers/{payload.Result}";
        }
        else
        {
            _error = $"Could not create customer. {(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }
        submitting = false;
    }

    private void GoToCustomer()
        => navigationManager.NavigateTo(_location);

    private void GoToList()
        => navigationManager.NavigateTo("/customers");
}