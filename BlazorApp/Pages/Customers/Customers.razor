@page "/customers"
@inject HttpClient Http
@inject ILogger<Index> _logger

<h1>Customers</h1>

<button @onclick="AddCustomer" class="btn btn-secondary mb-3 p-2">
    <span class="oi oi-plus" aria-hidden="true"></span>
    Add customer
</button>

@if (customers == null)
{
    <p>Loading...</p>
}
else
{

    <table class="table font-monospace">
        <caption>List of customers</caption>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Tickets</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.FirstName @customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>
                        @if (customer.Tickets != null)
                            {
                                @foreach (var ticketId in customer.Tickets)
                                {
                                    <a href="/tickets/@ticketId">@ticketId</a>
                                }
                            }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CustomerModel[] customers;
    private string _url = "https://localhost:44330/api/customers";
    private string _token;

    protected override async Task OnInitializedAsync()
    {
        _token = await localStorage.GetItemAsStringAsync("accessToken");

        if (string.IsNullOrEmpty(_token))
            navigationManager.NavigateTo("/signin");

        var request = new HttpRequestMessage(HttpMethod.Get, _url);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", _token);


        try
        {
            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
                customers = await response.Content.ReadFromJsonAsync<CustomerModel[]>();
        }
        catch (HttpRequestException)
        {
            _logger.LogWarning($"Could not reach {_url}.\n" +
                "The HTTP request (which makes use of CORS) failed because the HTTP connection failed at either the network or protocol level.\n" +
                "The error is not directly related to CORS, but is a fundamental network error of some kind.\n" +
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors/CORSDidNotSucceed");
        }

    }

    private void AddCustomer()
        => navigationManager.NavigateTo("/customers/add");
}
