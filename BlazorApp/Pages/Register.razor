@page "/register"
@inject ILogger<Register> _logger

<h3>Register</h3>
<TimeDisplay />
<MessageBox Error="@_error" />

@if (_registerModel != null)
{
    <EditForm Model="@_registerModel" OnValidSubmit="@RegisterAdmin">
        <DataAnnotationsValidator />

        <div class="form-group mb-3">
            <label>First name</label>
            <InputText type="text" id="firstname" class="form-control"
                       @bind-Value="_registerModel.FirstName" />
            <ValidationMessage For="() => _registerModel.FirstName" />
        </div>

        <div class="form-group mb-3">
            <label>Last name</label>
            <InputText type="text" id="lastname" class="form-control"
                       @bind-Value="_registerModel.LastName" />
            <ValidationMessage For="() => _registerModel.LastName" />
        </div>

        <div class="form-group mb-3">
            <label>Email</label>
            <InputText type="email" id="email" class="form-control"
                       @bind-Value="_registerModel.Email" />
            <ValidationMessage For="() => _registerModel.Email" />
        </div>

        <div class="form-group mb-3">
            <label>Password</label>
            <InputText type="password" id="password" class="form-control"
                       @bind-Value="_registerModel.Password" />
            <ValidationMessage For="() => _registerModel.Password" />
        </div>

        <div class="form-group mb-3">
            <label>Confirm Password</label>
            <InputText type="password" id="confirm-password" class="form-control"
                       @bind-Value="_registerModel.ConfirmPassword" />
            <ValidationMessage For="() => _registerModel.ConfirmPassword" />
        </div>

        <div class="form-group mb-3">
            <button type="submit" class="btn btn-success mt-3 @(_submitting ? "submitting" : "") " disabled=@_submitting>
                Register & sign in
            </button>
        </div>
    </EditForm>
}
@code {
    private RegisterModel _registerModel;

    private string _error;
    private bool _submitting = false;

    protected override async Task OnInitializedAsync()
    {
        _registerModel = new RegisterModel();

        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.ValidateUrl, auth: true);
        if (response.IsSuccessStatusCode)
            navigationManager.NavigateTo("/");
    }

    private async Task RegisterAdmin()
    {
        _submitting = true;
        _error = string.Empty;

        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.RegisterUrl, _registerModel);
        if (response.IsSuccessStatusCode)
        {
            var signin = await apiService.SignIn(new SignInModel { Email = _registerModel.Email, Password = _registerModel.Password });
            if (signin.IsSuccessStatusCode)
                navigationManager.NavigateTo("/", forceLoad: true);
            else
            {
                _error = $"Could not sign in. {(int)response.StatusCode} {response.ReasonPhrase}";
                apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
            }
        }
        else if (response.StatusCode == HttpStatusCode.Conflict)
            _error = $"Email address already registered.";
        else
        {
            _error = $"Could not register. {(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }
        _submitting = false;
    }
}
