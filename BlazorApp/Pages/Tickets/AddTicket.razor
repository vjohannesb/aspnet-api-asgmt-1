@page "/addticket"
@inject ILogger<AddTicket> _logger
<ValidateToken />

<h3>Register new ticket</h3>
<TimeDisplay />
<MessageBox Message="@_message" Error="@_error" LinkAction="GoToTicket" MethodMessage="Go to ticket" />

@if (_administrators == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="ticket" OnValidSubmit="SubmitTicket">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea @bind-Value="@ticket.Description" class="form-control" rows="3" />
            <ValidationMessage For="() => ticket.Description" />
        </div>

        <div class="mb-3">
            <label class="form-label">Status</label>
            <InputSelect @bind-Value="@ticket.Status" class="form-select" aria-label="Select ticket status">
                <option value="@TicketStatus.Open">Open</option>
                <option value="@TicketStatus.Active">Active</option>
                <option value="@TicketStatus.Closed">Closed</option>
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Customer</label>
            <InputSelect @bind-Value="@ticket.CustomerId" class="form-select" aria-label="Select a customer">
                @if (_customers != null && _customers.Count() > 0)
                    {
                    <option value="">Select a customer...</option>
                    @foreach (var customer in _customers)
                        {
                        <option value="@customer.CustomerId">
                            @customer.DisplayName
                        </option>
                        }
                    }
                    else
                    {
                    <option value="">No customers available...</option>
                    }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label class="form-label">Assign an administrator</label>
            <InputSelect @bind-Value="@ticket.AdminId" class="form-select" aria-label="Select an administrator">
                <option value="">Select an administrator...</option>
                @foreach (var admin in _administrators)
                    {
                    <option value="@admin.AdminId">
                        @admin.DisplayName
                    </option>
                    }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-success" disabled=@submitting>Submit</button>
        <button class="btn btn-secondary ms-2" @onclick="GoToList" disabled=@submitting>Back to List</button>
    </EditForm>

}


@code {
    private TicketViewModel ticket;
    private IEnumerable<AdminViewModel> _administrators;
    private IEnumerable<CustomerViewModel> _customers;

    private string _error;
    private string _message;
    private string _location;
    private bool submitting = false;

    protected override async Task OnInitializedAsync()
    {
        ticket = new TicketViewModel();

        var adminResponse = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.AdminsUrl, auth: true);
        if (adminResponse.IsSuccessStatusCode)
        {
            _administrators = await adminResponse.Content.ReadFromJsonAsync<AdminViewModel[]>();
            var customerResponse = await apiService.SendToAPIAsync(HttpMethod.Get, apiService.CustomersUrl, auth: true);
            if (customerResponse.IsSuccessStatusCode)
                _customers = await customerResponse.Content.ReadFromJsonAsync<CustomerViewModel[]>();
        }
        else if (adminResponse.StatusCode == HttpStatusCode.Unauthorized)
            navigationManager.NavigateTo("/signin");
        else
        {
            _error = $"Could not connect to API. {(int)adminResponse.StatusCode} {adminResponse.ReasonPhrase}";
            _message = string.Empty;
            apiService.LogWarningIfDebug(await adminResponse.Content.ReadAsStringAsync(), _logger);
        }
    }

    private async Task SubmitTicket()
    {
        _location = string.Empty;
        _error = string.Empty;
        _message = string.Empty;
        submitting = true;

        var response = await apiService.SendToAPIAsync(HttpMethod.Post, apiService.TicketsUrl, ticket, true);
        if (response.IsSuccessStatusCode)
        {
            ticket = new TicketViewModel();

            // POST Ticket returnerar ticket-id i Result-fältet
            var payload = await response.Content.ReadFromJsonAsync<ResponseModel>();
            _location = $"/tickets/{payload.Result}";
            _message = "Ticket created! ";
        }
        else
        {
            _error = $"Could not create ticket. {(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }

        submitting = false;
    }

    private void GoToTicket()
        => navigationManager.NavigateTo(_location);

    private void GoToList()
        => navigationManager.NavigateTo("/tickets");
}
