@page "/tickets/{id:int}/delete"
@inject ILogger<DeleteTicket> _logger

<h3>Delete Ticket</h3>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger">
        <span>@_error</span>
    </div>
}

<h4>Are you sure you want to delete this ticket?</h4>

@if (_ticket != null)
{
    <_TicketDetailsPartial Ticket="_ticket" />

    <div class="mt-3">
        <button class="btn btn-danger" @onclick="Delete">Delete</button>
        <button class="btn btn-secondary" @onclick="GoToList">Back to List</button>
    </div>
} 

@code {
    [Parameter]
    public int Id { get; set; }


    private string _ticketUrl = "https://localhost:44330/api/tickets";

    private TicketModel _ticket;
    private string _token;
    private string _error;
    private string _message = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        _ticketUrl += $"/{Id}";
        var response = await apiService.SendToAPIAsync(HttpMethod.Get, _ticketUrl, auth: true);
        if (response.IsSuccessStatusCode)
        {
            _ticket = await response.Content.ReadFromJsonAsync<TicketModel>();
            _message = string.Empty;
        }
        else
        {
            _error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }

        _message = string.Empty;
    }

    private async Task Delete()
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Delete, _ticketUrl, auth: true);
        if (response.IsSuccessStatusCode)
            navigationManager.NavigateTo("/tickets");
        else
        {
            _error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }
    }

    private void GoToList()
        => navigationManager.NavigateTo("/tickets");
}
