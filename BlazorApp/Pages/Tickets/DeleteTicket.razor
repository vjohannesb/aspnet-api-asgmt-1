@page "/tickets/{id:int}/delete"
@inject ILogger<DeleteTicket> _logger
<ValidateToken />

<h3>Delete Ticket</h3>
<TimeDisplay />
<MessageBox Error="@_error" />


@if (_ticket == null)
{
    <p>@_message</p>
}
else
{
<h4>Are you sure you want to delete this ticket?</h4>
<_TicketDetailsPartial Ticket="_ticket" />

<div class="mt-3">
    <button class="btn btn-danger" @onclick="Delete">Delete</button>
    <button class="btn btn-secondary" @onclick="GoToList">Back to List</button>
</div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private TicketViewModel _ticket;
    private string _error;
    private string _message = "Loading...";
    private string _ticketUrl;

    protected override async Task OnInitializedAsync()
    {
        _ticketUrl = $"{apiService.TicketsUrl}/{Id}";
        var response = await apiService.SendToAPIAsync(HttpMethod.Get, _ticketUrl, auth: true);
        if (response.IsSuccessStatusCode)
            _ticket = await response.Content.ReadFromJsonAsync<TicketViewModel>();
        else if (response.StatusCode == HttpStatusCode.Unauthorized)
            navigationManager.NavigateTo("/signin");
        else
        {
            _error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }

        _message = string.Empty;
    }

    private async Task Delete()
    {
        var response = await apiService.SendToAPIAsync(HttpMethod.Delete, _ticketUrl, auth: true);
        if (response.IsSuccessStatusCode)
            navigationManager.NavigateTo("/tickets");
        else
        {
            _error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }
    }

    private void GoToList()
        => navigationManager.NavigateTo("/tickets");
}
