@page "/tickets/{id:guid}";
@inject ILogger<TicketDetails> _logger
<ValidateToken />

<h3>TicketDetails</h3>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger">
        <span>@_error</span>
    </div>
}


@if (_ticket != null)
{
    <p>@_ticket.AssignedAdmin</p>
    <p>@_ticket.Customer</p>
    <p>@_ticket.DateCreated.ToString("yyyy-MM-dd HH:mm")</p>
    <p>@_ticket.DateUpdated.ToString("yyyy-MM-dd HH:mm")</p>
    <p>@_ticket.Description</p>
    <p>@_ticket.Status</p>
}
else
{
    <p>@_message</p>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private string _ticketUrl = "https://localhost:44330/api/tickets";

    private TicketModel _ticket;
    private string _token;
    private string _error;
    private string _message = "Loading...";


    protected override async Task OnInitializedAsync()
    {
        _ticketUrl += $"/{Id}";
        var response = await apiService.SendToAPIAsync(HttpMethod.Get, _ticketUrl, auth: true);
        if (response.IsSuccessStatusCode)
        {
            _ticket = await response.Content.ReadFromJsonAsync<TicketModel>();
            _message = string.Empty;
        }
        else
        {
            _error = $"{(int)response.StatusCode} {response.ReasonPhrase}";
            apiService.LogWarningIfDebug(await response.Content.ReadAsStringAsync(), _logger);
        }

        _message = string.Empty;
    }
}
